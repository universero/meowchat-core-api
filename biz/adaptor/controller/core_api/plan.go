// Code generated by hertz generator.

package core_api

import (
	"context"
	"github.com/xh-polaris/meowchat-core-api/biz/adaptor"
	"github.com/xh-polaris/meowchat-core-api/provider"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	core_api "github.com/xh-polaris/meowchat-core-api/biz/application/dto/meowchat/core_api"
)

// GetPlanPreviews .
// @router /plan/get_plan_previews [GET]
func GetPlanPreviews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetPlanPreviewsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.PlanService.GetPlanPreviews(ctx, &req)
	adaptor.Return(ctx, c, &req, resp, err)
}

// GetPlanDetail .
// @router /plan/get_plan_detail [GET]
func GetPlanDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetPlanDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.PlanService.GetPlanDetail(ctx, &req)
	adaptor.Return(ctx, c, &req, resp, err)
}

// NewPlan .
// @router /plan/new_plan [POST]
func NewPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.NewPlanReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.PlanService.NewPlan(ctx, &req, adaptor.ExtractUserMeta(ctx, c))
	adaptor.Return(ctx, c, &req, resp, err)
}

// DeletePlan .
// @router /plan/delete_plan [POST]
func DeletePlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.DeletePlanReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.PlanService.DeletePlan(ctx, &req)
	adaptor.Return(ctx, c, &req, resp, err)
}

// SearchPlan .
// @router /plan/search_plan [GET]
func SearchPlan(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SearchPlanReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.PlanService.SearchPlan(ctx, &req)
	adaptor.Return(ctx, c, &req, resp, err)
}
